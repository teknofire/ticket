#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage: ticket open
# Summary: Open a ticket in browser and terminal shell
# Provide ticket completions
# Built-in help

$LOAD_PATH.unshift File.join(ENV["_TICKET_ROOT"], "share/ticket")

require "clamp"
require "json"
require "colorize"
require "fileutils"
require "helpers/ticket_info"
require "helpers/ticket"
require "helpers/actions"

class OpenCommand < Clamp::Command
  include TicketInfo
  attr_accessor :ticket

  option "--complete", :flag, "autocomplete output", hidden: true
  option "--[no-]shell", :flag, "Skip launching new shell for ticket", default: true
  option "--[no-]browser", :flag, "Skip opening ticket in browser", default: Ticket.config.open_browser?
  option "--[no-]download", :flag, "Download files when opening ticket", default: Ticket.config.autodownload?
  option "--skip-new", :flag, "Skip creating new ticket if not found locally", default: Ticket.config.skip_new?
  option "--verbose", :flag, "verbose output"

  parameter "[TICKET_ID]", "ticket_id", attribute_name: :ticket_id

  attr_accessor :ticket

  def execute
    return autocomplete if complete?

    @ticket ||= Ticket::Info.load(ticket_id)

    launch_browser
    launch_shell
  rescue Ticket::NotFound => e
    puts e.message.red
  end

  def autocomplete
    opts = Ticket::Info.ids
    # opts = %w{ --verbose }

    puts opts.join("\n") unless opts.empty?
    exit
  end

  def download_files
    return unless download?

    Ticket::Actions.download(ticket_id, verbose: verbose?)
  end

  def launch_browser
    return unless browser?

    puts "Opening #{ticket.url.green}"
    system "open #{ticket.url}"
  end

  def launch_shell
    # skip if user didn't request new shell
    return unless shell?
    # skip if we are already somewhere in the ticket_path
    return if Dir.pwd.match?(ticket.path)

    unless File.directory?(ticket.path)
      puts "Unable to find local ticket info, looking in Zendesk...".yellow

      if Ticket.config.zendesk? && !skip_new?
        puts ticket.zendesk
        if ticket.zendesk.organization.nil? 
          puts "Unable to get organization name from Zendesk, please use `ticket new ORGNAME #{ticket_id}` to open this ticket".red
          return
        end

        org = ticket.zendesk.organization.name.gsub(/[^\w]+/, "")
        puts "Creating new ticket workspace for #{org}"
        system("ticket new #{org} #{ticket_id}") if org
      end

      return
    end

    puts "Launching new #{File.basename(ENV['SHELL']).green} shell in #{ticket.path.green}"
    puts "Press [CTRL-D] to exit".red

    Dir.chdir ticket.path
    download_files
    exec ENV["SHELL"]
  end
end

OpenCommand.run
