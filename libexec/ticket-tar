#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage: ticket tar
# Summary: Describe tar command here
# Provide ticket completions

$LOAD_PATH.unshift File.join(ENV["_TICKET_ROOT"], "share/ticket")

require "clamp"
require "helpers/ticket_info"

class TarListCommand < Clamp::Command
  parameter "FILE", "File to list contents of", attribute_name: :file
  def execute
    puts "Listing contents of #{file}"

    exec "tar -tvf #{file}"
  end

  def self.autocomplete
    Dir.glob("*.tbz2") + Dir.glob("*.tar.gz") - ARGV
  end
end

class TarViewCommand < Clamp::Command
  option "--viewer", "VIEWER", "Viewer to use", default: "less"

  parameter "TARFILE", "Tar file to view the contents from", attribute_name: :tarfile
  parameter "FILE", "File in the tar to view the contents of", attribute_name: :file

  def execute
    exec "tar -xOf #{tarfile} #{file}"
  end

  def self.autocomplete
    if ARGV.select.size <= 2 || !File.exist?(ARGV[2])
      TarListCommand.autocomplete
    else
      file = ARGV[2]
      `tar -tf #{file}`.split("\n") - ARGV
    end
  end
end

class TarCommand < Clamp::Command
  include TicketInfo

  option "--complete", :flag, "autocomplete output" do
    autocomplete
    exit(0)
  end

  self.default_subcommand = "list"
  subcommand %w[list l], "list contents of tar", TarListCommand
  subcommand %w[view v], "view contents of file in tar", TarViewCommand

  def execute
    # example usage
    # unless File.exists?(file)
    #   signal_usage_error "file doesn't exist"
    # end

    # Put the rest of the tar command here
  end

  def autocomplete
    opts = %w[list view --help]

    if ARGV.include?("list") || ARGV.include?("l")
      opts = TarListCommand.autocomplete
    end

    if ARGV.include?("view") || ARGV.include?("v")
      opts = TarViewCommand.autocomplete
    end

    puts opts.join("\n")
  end
end

TarCommand.run
